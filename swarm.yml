services:
    nginx:
        image: nginx:latest
        environment:
            - BACKEND_SERVER_NAME=${BACKEND_SERVER_NAME}
            - FRONTEND_SERVER_NAME=${FRONTEND_SERVER_NAME}
        ports:
            - "80:80"
            - "443:443"
            - "8080:8080"
        volumes:
            - wordpress-html:/var/www/html
            - nginx-configs:/mnt/nginx
            # - /etc/letsencrypt/live/<domain>/fullchain.pem:/etc/nginx/ssl/fullchain.pem:ro
            # - /etc/letsencrypt/live/<domain>/privkey.pem:/etc/nginx/ssl/privkey.pem:ro
        entrypoint:
            [
                "/bin/sh",
                "-c",
                "ln -sf /mnt/nginx/nginx.conf /etc/nginx/nginx.conf && ln -sf /mnt/nginx/templates /etc/nginx/templates && exec /docker-entrypoint.sh nginx -g 'daemon off;'",
            ]
        networks:
            - intranet
        deploy:
            replicas: 1
            placement:
                constraints: [node.role == manager]
            restart_policy:
                condition: on-failure

    db:
        image: mysql:8.0
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            MYSQL_DATABASE: ${MYSQL_DATABASE}
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}
        ports:
            - "3306:3306"
        volumes:
            - mysql-configs:/mnt/mysql
            - db:/var/lib/mysql
        entrypoint:
            [
                "/bin/sh",
                "-c",
                "ln -sf /mnt/mysql/init-db.sql /docker-entrypoint-initdb.d/init-db.sql && exec /docker-entrypoint.sh mysqld",
            ]
        networks:
            - intranet
        deploy:
            replicas: 1
            placement:
                constraints: [node.role == manager]
            restart_policy:
                condition: on-failure

    wordpress:
        image: wordpress:php8.1-fpm
        ports:
            - "9000:9000"
        environment:
            WORDPRESS_DB_HOST: db
            WORDPRESS_DB_USER: ${MYSQL_USER}
            WORDPRESS_DB_PASSWORD: ${MYSQL_PASSWORD}
            WORDPRESS_DB_NAME: ${MYSQL_DATABASE}
            WORDPRESS_CONFIG_EXTRA: |
                define('WP_HOME', 'http://${BACKEND_SERVER_NAME}');
                define('WP_SITEURL', 'http://${BACKEND_SERVER_NAME}');
                define('WP_DEBUG_LOG', true );
                define('WP_ALLOW_MULTISITE', true);

            # define( 'MULTISITE', true );
            # define( 'SUBDOMAIN_INSTALL', true );
            # define( 'DOMAIN_CURRENT_SITE', '${BACKEND_SERVER_NAME}' );
            # define( 'PATH_CURRENT_SITE', '/' );
            # define( 'SITE_ID_CURRENT_SITE', 1 );
            # define( 'BLOG_ID_CURRENT_SITE', 1 );

        volumes:
            - wordpress-html:/var/www/html
            - wordpress-plugins:/var/www/html/wp-content/plugins
            - php-fpm-configs:/mnt/php-fpm
        entrypoint:
            [
                "/bin/sh",
                "-c",
                "ln -sf /mnt/php-fpm/www.conf /usr/local/etc/php-fpm.d/www.conf && exec /docker-entrypoint.sh php-fpm",
            ]
        networks:
            - intranet
        hostname: "wordpress-{{.Task.Slot}}"
        deploy:
            replicas: 3
        

    frontend:
        image: trajectory-frontend
        ports:
            - 3000:3000
        networks:
            - intranet

    # Metrics

    # Grafana
    grafana:
        image: grafana/grafana:latest
        ports:
            - "3001:3000"
        volumes:
            - grafana_data:/var/lib/grafana
        environment:
            - GF_SECURITY_ADMIN_PASSWORD=admin
        networks:
            - intranet
        deploy:
            replicas: 1
            placement:
                constraints: [node.role == manager]
            restart_policy:
                condition: on-failure


    # Metrics source
    prometheus:
        image: prom/prometheus:latest
        volumes:
            - nfs/configs/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
            - prometheus-data:/prometheus
        ports:
            - "9090:9090" # Expose Prometheus UI
        networks:
            - intranet
        deploy:
            replicas: 1
            placement:
                constraints: [node.role == manager]
            restart_policy:
                condition: on-failure

    # Exporters
    nginx-exporter:
        image: nginx/nginx-prometheus-exporter:latest
        command:
            - -nginx.scrape-uri=http://nginx:8080/stub_status
        networks:
            - intranet
        deploy:
            replicas: 1
            placement:
                constraints: [node.role == manager]
            restart_policy:
                condition: on-failure

    mysql-exporter:
        image: prom/mysqld-exporter
        networks:
            - intranet
        ports:
            - "9104:9104"
        environment:
            MYSQLD_EXPORTER_PASSWORD: ${MYSQL_EXPORTER_PASSWORD}
        volumes:
            - mysql-exporter-configs:/mnt/mysql-exporter
        command:
            - --config.my-cnf=/mnt/mysql-exporter/mysqld_exporter.cnf
            - --mysqld.address=db:3306
        deploy:
            replicas: 1
            resources:
                limits:
                    cpus: "0.50"
                    memory: 512M

    wordpress-exporter:
        image: hipages/php-fpm_exporter:latest
        environment:
            - PHP_FPM_SCRAPE_URI=tcp://wordpress-{{.Task.Slot}}:9000/status
        networks:
            - intranet
        deploy:
            replicas: 3
            restart_policy:
                condition: on-failure

    cadvisor:
        image: gcr.io/cadvisor/cadvisor
        deploy:
            mode: global
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - /:/rootfs:ro
            - /var/run:/var/run
            - /sys:/sys:ro
            - /var/lib/docker:/var/lib/docker:ro
        networks:
            - intranet
        labels:
            prometheus-job: "cadvisor"

networks:
    intranet:
        external: true

volumes:
    db:
    prometheus-data:
    grafana_data:

    wordpress-html:
        driver_opts:
            type: "nfs"
            o: "addr=${SERVER_IP},rw"
            device: ":/srv/nfs/shared/wordpress/html"

    wordpress-plugins:
        driver_opts:
            type: "nfs"
            o: "addr=${SERVER_IP},rw"
            device: ":/srv/nfs/shared/wordpress/plugins"

    nginx-configs:
        driver_opts:
            type: "nfs"
            o: "addr=${SERVER_IP},rw"
            device: ":/srv/nfs/shared/configs/nginx"

    php-fpm-configs:
        driver_opts:
            type: "nfs"
            o: "addr=${SERVER_IP},rw"
            device: ":/srv/nfs/shared/configs/php-fpm"

    mysql-configs:
        driver_opts:
            type: "nfs"
            o: "addr=${SERVER_IP},rw"
            device: ":/srv/nfs/shared/configs/mysql"

    mysql-exporter-configs:
        driver_opts:
            type: "nfs"
            o: "addr=${SERVER_IP},rw"
            device: ":/srv/nfs/shared/configs/exporters/mysql"

# docker swarm init --advertise-addr
# docker network create --driver overlay --scope swarm intranet

# chmod +x deploy.sh
# ./deploy.sh copy

# docker stack services trajectory
# docker service logs trajectory_
# docker stack ps trajectory

# docker stack rm trajectory
