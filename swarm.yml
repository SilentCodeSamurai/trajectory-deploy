services:
    nginx:
        image: nginx:latest
        environment:
            - BACKEND_SERVER_NAME=${BACKEND_SERVER_NAME}
            - FRONTEND_CLIENT_SERVER_NAME=${FRONTEND_CLIENT_SERVER_NAME}
            - FRONTEND_ADMIN_SERVER_NAME=${FRONTEND_ADMIN_SERVER_NAME}

        configs:
            - source: nginx-conf
              target: /etc/nginx/nginx.conf
            - source: nginx-backend-template
              target: /etc/nginx/templates/backend.conf.template
            - source: nginx-default-template
              target: /etc/nginx/templates/default.conf.template
            - source: nginx-frontend-client-template
              target: /etc/nginx/templates/frontend-client.conf.template
            - source: nginx-frontend-admin-template
              target: /etc/nginx/templates/frontend-admin.conf.template
            - source: nginx-stub-template
              target: /etc/nginx/templates/stub.conf.template
        secrets:
            - cert.crt
            - cert.key

        volumes:
            - wordpress-data:/var/www/html:ro
        networks:
            - intranet
        ports:
            - "80:80"
            - "443:443"
            - "8080:8080"

        deploy:
            replicas: 1
            placement:
                constraints: [node.role == manager]
            restart_policy:
                condition: on-failure

    db:
        image: mysql:8.0
        environment:
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            MYSQL_DATABASE: ${MYSQL_DATABASE}
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}
        configs:
            - source: mysql-init-db
              target: /docker-entrypoint-initdb.d/init-db.sql
            - source: mysql-performance-cnf
              target: /etc/mysql/conf.d/performance.cnf
        volumes:
            - db:/var/lib/mysql
        networks:
            - intranet
        ports:
            - "3306:3306"
        deploy:
            replicas: 1
            placement:
                constraints: [node.role == manager]
            restart_policy:
                condition: on-failure

    wordpress:
        image: wordpress:6.6-php8.1-fpm-alpine
        environment:
            WORDPRESS_DB_HOST: db
            WORDPRESS_DB_USER: ${MYSQL_USER}
            WORDPRESS_DB_PASSWORD: ${MYSQL_PASSWORD}
            WORDPRESS_DB_NAME: ${MYSQL_DATABASE}
            WORDPRESS_CONFIG_EXTRA: |
                define('WP_HOME', 'http://${BACKEND_SERVER_NAME}');
                define('WP_SITEURL', 'http://${BACKEND_SERVER_NAME}');
                define('WP_DEBUG_LOG', true );
                define('WP_ALLOW_MULTISITE', true);

            # define( 'MULTISITE', true );
            # define( 'SUBDOMAIN_INSTALL', true );
            # define( 'DOMAIN_CURRENT_SITE', '${BACKEND_SERVER_NAME}' );
            # define( 'PATH_CURRENT_SITE', '/' );
            # define( 'SITE_ID_CURRENT_SITE', 1 );
            # define( 'BLOG_ID_CURRENT_SITE', 1 );
        configs:
            - source: php-fpm-www-conf
              target: /usr/local/etc/php-fpm.d/www.conf
            - source: php-fpm-resources-ini
              target: /usr/local/etc/php/conf.d/resources.ini
        volumes:
            - wordpress-data:/var/www/html
        networks:
            - intranet
        hostname: "wordpress-{{.Task.Slot}}"
        deploy:
            replicas: 1

    frontend-client:
        image: trajectory-frontend-client:21
        networks:
            - intranet
        deploy:
            replicas: 1
            placement:
                constraints: [node.role == manager]
            restart_policy:
                condition: on-failure

    frontend-admin:
        image: trajectory-frontend-admin:21
        networks:
            - intranet
        deploy:
            replicas: 1
            placement:
                constraints: [node.role == manager]
            restart_policy:
                condition: on-failure

    # Metrics

    # Grafana
    grafana:
        image: grafana/grafana:latest
        environment:
            - GF_SECURITY_ADMIN_PASSWORD=admin
        volumes:
            - grafana_data:/var/lib/grafana
        networks:
            - intranet
        ports:
            - "3001:3000"
        deploy:
            replicas: 1
            placement:
                constraints: [node.role == manager]
            restart_policy:
                condition: on-failure

    # Metrics source
    prometheus:
        image: prom/prometheus:latest
        configs:
            - source: prometheus-yml
              target: /etc/prometheus/prometheus.yml
        volumes:
            - prometheus-data:/prometheus
        networks:
            - intranet
        ports:
            - "9090:9090" # Expose Prometheus UI
        deploy:
            replicas: 1
            placement:
                constraints: [node.role == manager]
            restart_policy:
                condition: on-failure

    # Exporters
    nginx-exporter:
        image: nginx/nginx-prometheus-exporter:latest
        command:
            - -nginx.scrape-uri=http://nginx:8080/stub_status
        networks:
            - intranet
        deploy:
            replicas: 1
            placement:
                constraints: [node.role == manager]
            restart_policy:
                condition: on-failure

    mysql-exporter:
        image: prom/mysqld-exporter
        environment:
            MYSQLD_EXPORTER_PASSWORD: ${MYSQL_EXPORTER_PASSWORD}
        configs:
            - source: mysqld-exporter-cnf
              target: /configs/mysql-exporter/mysqld_exporter.cnf
        networks:
            - intranet
        ports:
            - "9104:9104"
        command:
            - --config.my-cnf=/configs/mysql-exporter/mysqld_exporter.cnf
            - --mysqld.address=db:3306
        deploy:
            replicas: 1
            resources:
                limits:
                    cpus: "0.50"
                    memory: 512M

    wordpress-exporter:
        image: hipages/php-fpm_exporter:latest
        environment:
            - PHP_FPM_SCRAPE_URI=tcp://wordpress-{{.Task.Slot}}:9000/status
        networks:
            - intranet
        deploy:
            replicas: 1
            restart_policy:
                condition: on-failure

    cadvisor:
        image: gcr.io/cadvisor/cadvisor
        deploy:
            mode: global
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - /:/rootfs:ro
            - /var/run:/var/run
            - /sys:/sys:ro
            - /var/lib/docker:/var/lib/docker:ro
        networks:
            - intranet
        labels:
            prometheus-job: "cadvisor"

networks:
    intranet:
        external: true

configs:
    # Nginx
    nginx-conf:
        file: ./configs/nginx/nginx.conf
    nginx-backend-template:
        file: ./configs/nginx/templates/backend.conf.template
    nginx-default-template:
        file: ./configs/nginx/templates/default.conf.template
    nginx-frontend-client-template:
        file: ./configs/nginx/templates/frontend-client.conf.template
    nginx-frontend-admin-template:
        file: ./configs/nginx/templates/frontend-admin.conf.template
    nginx-stub-template:
        file: ./configs/nginx/templates/stub.conf.template

    # MySQL
    mysql-performance-cnf:
        file: ./configs/mysql/performance.cnf
    mysql-init-db:
        file: ./configs/mysql/init-db.sql

    # PHP-FPM
    php-fpm-www-conf:
        file: ./configs/php-fpm/www.conf
    php-fpm-resources-ini:
        file: ./configs/php-fpm/resources.ini

    # Prometheus
    prometheus-yml:
        file: ./configs/prometheus/prometheus.yml

    # Exporters
    # MySQL exporter
    mysqld-exporter-cnf:
        file: ./configs/exporters/mysql/mysqld_exporter.cnf

secrets:
    cert.crt:
        file: /etc/letsencrypt/live/kam-life-pro.ru/fullchain.pem
    cert.key:
        file: /etc/letsencrypt/live/kam-life-pro.ru/privkey.pem

volumes:
    db:
    prometheus-data:
    grafana_data:

    wordpress-data:
        driver_opts:
            type: "nfs"
            o: "addr=${SERVER_IP},rw"
            device: ":/srv/nfs/shared/wordpress"
# docker swarm init --advertise-addr
# docker network create --driver overlay --scope swarm intranet

# chmod -R +x ./scripts
# ./scripts/docker-pull.sh
# ./scripts/deploy.sh update

# docker service update --constraint-add 'node.role == worker' --constraint-rm 'node.role == manager' web
# docker service scale web=3
# docker stack rm trajectory
